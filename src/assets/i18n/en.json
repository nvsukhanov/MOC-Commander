{
  "appName": "MOC Commander",
  "appTitleTemplate": "{ pageTitle } | { appName }",
  "pageNotFound": "Page not found",
  "hubListHubIsNotConnected": "disconnected",
  "discoverHub": "Connect",
  "bluetoothIsNotAvailable": "Bluetooth is not available",
  "uploadFileButtonTitle": "Upload",
  "uploadFileDialogTitle": "Select a file",
  "common": {
    "copyToClipboard": "Copy to clipboard",
    "copyToClipboardSuccessNotification": "Copied to clipboard",
    "copyToClipboardErrorNotification": "Failed to copy to clipboard",
    "dismissNotification": "Dismiss"
  },
  "appUpdatedNotification": {
    "prefixMessage": "App has been updated, for details see",
    "linkText": "About page"
  },
  "adjustMotorPosition": {
    "title": "Motor position adjustment",
    "stepCcw": "Step { step }° counter-clockwise",
    "stepCw": "Step { step }° clockwise",
    "goToZero": "Go to zero"
  },
  "confirmationDialog": {
    "defaultTitle": "Are you sure?",
    "defaultConfirmButtonTitle": "Confirm",
    "defaultCancelButtonTitle": "Cancel"
  },
  "unsavedChangesDialog": {
    "title": "Unsaved changes",
    "content": "You have unsaved changes. Are you sure you want to leave this page?",
    "confirmButtonTitle": "Leave",
    "cancelButtonTitle": "Stay"
  },
  "leavingRunningSchemeDialog": {
    "title": "Control scheme is running",
    "content": "Leaving this page will stop the control scheme. Are you sure you want to leave?",
    "confirmButtonTitle": "Leave",
    "cancelButtonTitle": "Stay"
  },
  "bluetoothUnavailable": {
    "message": "It appears that your browser does not support the Web Bluetooth API",
    "manualsPre": "Please check",
    "manualsLocalRef": "installation manuals",
    "manualsCanIUsePre": "for your platform or refer to"
  },
  "nav": {
    "controllersList": "Controllers",
    "hubsList": "Hubs",
    "controlSchemesList": "Control schemes",
    "navMenuAriaLabel": "App menu",
    "aboutPageButton": "About",
    "settingsPageButton": "Settings",
    "help": "Help"
  },
  "pageTitle": {
    "bindingCreateForScheme": "{ controlSchemeName } - New binding",
    "bindingCreate": "New binding",
    "bindingEditForScheme": "{ controlSchemeName } - Edit binding",
    "bindingEdit": "Edit binding",
    "controlSchemesList": "Control schemes",
    "controlSchemeView": "{ controlSchemeName }",
    "controlSchemeRename": "Rename control scheme ''{ previousName }''",
    "controlSchemePortEditForScheme": "{ controlSchemeName } - {hubName}, port {portId}",
    "controlSchemePortEdit": "Port configuration",
    "controllerList": "Controllers",
    "controllerView": "{ controllerName } controller settings",
    "hubEditWithHubName": "{ hubName } settings",
    "hubEdit": "Settings",
    "hubsList": "Hubs",
    "hubView": "{ hubName }",
    "notFound": "Page not found",
    "about": "About",
    "settings": "Settings",
    "help": "Help"
  },
  "helpPage": {
    "installationManuals": "Installation manuals"
  },
  "settings": {
    "theme": "Theme",
    "themeSystem": "System",
    "themeLight": "Light",
    "themeDark": "Dark",
    "language": "Language",
    "createStateBackupButtonTitle": "Create backup",
    "restoreStateFromBackupButtonTitle": "Restore from backup",
    "restoreStateFromBackupDialogTitle": "Restore from backup",
    "restoreStateFromBackupDialogDescription": "Restoring from backup will replace the current settings, erasing all previous data, and will restart the application. This action cannot be undone.",
    "restoreStateFromBackupDialogConfirmButtonTitle": "Restore",
    "restoreStateFromBackupDialogCancelButtonTitle": "Cancel",
    "restoreStateFromBackupDialogFileCorrupted": "Backup file is corrupted",
    "resetStateButtonTitle": "Reset",
    "resetStateDialogTitle": "Reset app",
    "resetStateDialogDescription": "Resetting the app will erase all data and restart the application. This action cannot be undone.",
    "resetStateDialogConfirmButtonTitle": "Reset",
    "resetStateDialogCancelButtonTitle": "Cancel",
    "useLinuxCompatibleBluetoothApi": "Use Linux-compatible connection mode",
    "useLinuxCompatibleBluetoothApiEnabled": "Enabled",
    "useLinuxCompatibleBluetoothApiDisabled": "Disabled",
    "useLinuxCompatibleBluetoothApiDescription": "Enable this option if you are using a Linux-based system and having problems connecting to hubs. Enabling this option may increase connection latency. Changes will affect only new connections.",
    "gamepadPollRate": "Gamepad poll rate",
    "gamepadPollRateDescription": "Low poll rate may reduce CPU usage, but will also increase input lag.",
    "gamepadPollRateLow": "Low",
    "gamepadPollRateDefault": "Default"
  },
  "language": {
    "en": "English",
    "ru": "Русский"
  },
  "hub": {
    "hub": "Hub",
    "edit": "Edit",
    "name": "Hub name",
    "save": "Save",
    "cancel": "Cancel",
    "view": "View",
    "disconnect": "Disconnect",
    "forget": "Forget",
    "forgetHubLabel": "Forget hub { name }",
    "forgerHubNotificationConfirmationTitle": "Are you sure you want to forget this hub?",
    "forgerHubNotificationConfirmationContent": "Some control schemes may stop working. You can revert this action by connecting the hub again",
    "forgerHubNotificationConfirmationConfirmButtonTitle": "Forget",
    "forgerHubNotificationConfirmationCancelButtonTitle": "Cancel",
    "noneConnected": "There are no connected hubs yet",
    "notConnected": "disconnected",
    "isNotConnected": "Hub ''{name}'' is not connected",
    "isNotFound": "Hub is not found",
    "connected": "Hub {name} connected",
    "disconnected": "Hub {name} disconnected",
    "connectFailed": "Failed to connect to hub",
    "alreadyConnected": "Hub {name} is already connected",
    "batteryLevel": "Battery: {batteryLevel}%",
    "rssiLevel": "Signal level: {rssi}",
    "buttonState": "Hub button state: {isButtonPressed, select, true {pressed} other {released}}",
    "port": "Port {portId}",
    "unknownHub": "Unknown hub ''{ hubId }''",
    "hubNameErrorMinLength": "Hub name must be at least { requiredLength } character long",
    "hubNameErrorMaxLength": "Hub name must be no more than { requiredLength } characters long",
    "hubNameErrorPattern": "Hub name can only contain letters, numbers, spaces and the following characters: ''-'' ''_'' ''.''",
    "hubNameSetError": "An error occurred while setting hub name",
    "batteryLevelTitle": "Battery level",
    "batteryLevelValue": "{ batteryLevel }%",
    "rssiLevelTitle": "Signal level",
    "buttonStateTitle": "Button state",
    "buttonStateValue": "{ isButtonPressed, select, true {Pressed} other {Released} }",
    "firmwareVersionTitle": "Software version",
    "hardwareVersionTitle": "Hardware version",
    "hubPropertyValueIsUnknown": "Unknown"
  },
  "hubTypes": {
    "boost": "Boost Hub",
    "weDo": "WeDo Hub",
    "duploTrain": "Duplo Train",
    "twoPortHub": "Two-port Hub",
    "twoPortHandset": "Two-port Handset",
    "unknown": "Unknown hub type",
    "fourPortHub": "Four-port Hub"
  },
  "controlSchemeRename": {
    "title": "Rename control scheme ''{previousName}''",
    "nameField": "New control scheme name",
    "saveButton": "Save",
    "cancelButton": "Cancel"
  },
  "controlScheme": {
    "newSchemeDialogTitle": "Create new control scheme",
    "newSchemeDialogSubmitButtonTitle": "Create",
    "newSchemeDialogCancelButtonTitle": "Cancel",
    "newSchemeDialogNameField": "Scheme name",
    "newSchemeDialogDefaultName": "New scheme",
    "notFound": "Scheme is not found",
    "noControlSchemes": "There are no control schemes yet",
    "bindingsListEmptyNotification": "There are no bindings in this scheme yet",
    "create": "Create",
    "cancelEdit": "Cancel",
    "deleteBinding": "Delete",
    "saveEdited": "Save",
    "saveCreated": "Save",
    "cancelCreate": "Cancel",
    "cancelAddBinding": "Cancel",
    "createBindingWaitingForInputTitle": "Waiting for input",
    "createBindingWaitingForInputContent": "Move the controller's stick or press a button",
    "view": "View",
    "edit": "Edit",
    "editNameButtonTitle": "Edit control scheme name",
    "editNameSaveButtonTitle": "Save",
    "editNameCancelButtonTitle": "Cancel",
    "run": "Start",
    "runSuccessNotification": "Control scheme ''{ name }'' started",
    "stopNotification": "Control scheme stopped",
    "runFailed": "Failed to start",
    "runFailedCalibrationOutOfRange": "Failed to start due to servo calibration failure: range is out of bounds",
    "runBlockerSchemeDoesNotExist": "Control scheme does not exist",
    "runBlockerAlreadyRunning": "Control scheme is already running",
    "runBlockerBindingsDoesNotExist": "Control scheme does not have any bindings",
    "runBlockerSomeControllersAreNotConnected": "Some controllers are not connected",
    "runBlockerSomeIosAreNotConnected": "Some IOs are not connected",
    "runBlockerSomeHubsAreNotConnected": "Some hubs are not connected",
    "runBlockerSomeIosHaveNoRequiredCapabilities": "Some IOs do not have required capabilities",
    "stop": "Stop",
    "delete": "Delete",
    "renameSchemeToolbarButton": "Rename",
    "export": "Export",
    "exportDialogTitle": "''{ name }'' export string",
    "exportDialogCopyButtonTitle": "Copy",
    "exportDialogCloseButtonTitle": "Close",
    "import": "Import",
    "importDialogTitle": "Import control scheme",
    "importDialogDescription": "Paste control scheme export string",
    "importDialogImportButtonTitle": "Import",
    "importDialogCancelButtonTitle": "Cancel",
    "importDataInvalid": "Invalid control scheme export string",
    "importSuccessNotification": "Control scheme ''{ name }'' imported successfully",
    "deleteSchemeConfirmationTitle": "Are you sure you want to delete ''{name}'' scheme?",
    "deleteSchemeConfirmationContent": "This action cannot be undone",
    "deleteSchemeConfirmationConfirmButtonTitle": "Delete",
    "deleteSchemeConfirmationCancelButtonTitle": "Cancel",
    "deleteBindingConfirmationTitle": "Are you sure you want to delete this binding?",
    "deleteBindingConfirmationContent": "This action cannot be undone",
    "deleteBindingConfirmationConfirmButtonTitle": "Delete",
    "deleteBindingConfirmationCancelButtonTitle": "Cancel",
    "bindingAssignControlButtonTitle": "Assign control",
    "bindingInputIsNotAssigned": "Not assigned",
    "bindingInputControlUnassignButtonTitle": "Unassign control",
    "showBindingInputSettings": "Settings",
    "bindingOutputSectionPortLabel": "Port",
    "bindingOutputSectionOperationModeLabel": "Operation mode",
    "bindingOutputSectionOperationModeValue": "{ name }",
    "expandCollapseHub": "Expand/collapse hub {name}",
    "expandCollapseIo": "Expand/collapse port {portName}",
    "controllerIsNotConnectedLabel": "Controller is not connected",
    "cannotCreateBinding": "Cannot create binding - there are no controllable IOs present",
    "noDeviceConnected": "No device connected",
    "unsupportedBindingType": "{ bindingType } (unsupported)",
    "ioCapabilitiesMismatch": "Attached device does not have required capabilities",
    "outputConfigurationNotRequired": "No configuration required",
    "runningDetailsIsRunningNotification": "Control scheme is running",
    "outputSpeedControlTitle": "Speed",
    "outputPowerControlTitle": "Power",
    "outputInvertControlTitle": "Invert",
    "outputEndStateControlTitle": "End state",
    "accelerationTimeMs": "Acceleration time",
    "decelerationTimeMs": "Deceleration time",
    "profileTimingPostfix": "ms",
    "useAccelerationProfile": "Use acceleration profile",
    "useDecelerationProfile": "Use deceleration profile",
    "portConfigNotFound": "Port configuration is not found",
    "portConfigTitle": "Port configuration",
    "portConfigSubtitle": "Hub ''{hubName}'', port {portId}",
    "portConfigSaveButtonTitle": "Save",
    "portConfigCancelButtonTitle": "Cancel",
    "newSchemeDialogNameRequired": "Scheme name is required",
    "newSchemeDialogNameUniqueness": "Scheme with this name already exists",
    "fullControllerInputName": "{controllerName} / {inputName}",
    "fullControllerInputNameWithDirection": "{controllerName} / {inputName} ({inputDirection, select, 0 {+} other {-}})",
    "controllerInputNameWithPort": "Port {portId} / {inputName}",
    "loopingModeTitle": "Looping mode",
    "loopingModeNone": "None",
    "loopingModeCycle": "Cycle",
    "loopingModePingPong": "Ping-pong",
    "bindingSectionOutputTitle": "Output",
    "bindingSectionInputTitle": "Input",
    "bindingSectionConfigTitle": "Settings",
    "menu": "Menu",
    "outputSpeed": "Speed",
    "outputPower": "Power",
    "issuesSectionTitle": "Issues",
    "widgetsSectionTitle": "Widgets",
    "bindingsSectionTitle": "Bindings",
    "addBindingButtonTitle": "Add binding",
    "addWidgetButtonTitle": "Add widget",
    "inputSettings": {
      "title": "Input settings",
      "inputPipesPresetTitle": "Configuration",
      "inputPipesPresetNone": "None",
      "inputPipesPresetExponentialGain": "Exponential gain",
      "inputPipesPresetLogarithmicGain": "Logarithmic gain",
      "inputPipesPresetOnOffToggle": "On/off toggle",
      "inputPipesPresetPulse1Hz": "Pulse 1 Hz",
      "inputPipesPresetPulse2Hz": "Pulse 2 Hz",
      "inputPipesPresetPulse5Hz": "Pulse 5 Hz",
      "confirmButtonTitle": "Save",
      "cancelButtonTitle": "Cancel"
    },
    "tasks": {
      "speedSummary": "Speed: { speed }%",
      "brakeSummary": "Brake",
      "setAngleSummary": "Angle: { angle }°",
      "stepperCwSummary": "Step: { degree }° clockwise",
      "stepperCcwSummary": "Step: { degree }° counter-clockwise",
      "trainSummary": "Train, speed #{level} ({speedPercent}%){ isLooping, select, true { (mirror)} other {}}",
      "gearboxSummary": "Gearbox, gear #{level} ({angle}°){ isLooping, select, true { (mirror)} other {}}",
      "powerSummary": "Power: { power }%"
    },
    "speedBinding": {
      "operationMode": "Speed",
      "forwardsInput": "Forwards",
      "backwardsInput": "Backwards",
      "brakeInput": "Brake",
      "missingInputs": "At least one of the inputs must be assigned",
      "outputSpeed": "Max speed"
    },
    "servoBinding": {
      "operationMode": "Servo",
      "outputCenterOffset": "Center offset (°)",
      "outputAngleRange": "Servo range (°)",
      "calibrateOnStart": "Auto-calibrate on start",
      "calibrate": "Calibrate",
      "calibrationIsInProgress": "Servo calibration is in progress",
      "calibrationError": "An error occurred during servo calibration",
      "calibrationOutOfRangeError": "Servo calibration failed: the range is out of bounds",
      "calibrationCancel": "Cancel",
      "readServoCenterFromPort": "Read servo center from port",
      "readServoRangeFromPort": "Read servo range from port",
      "cwAction": "Clockwise",
      "ccwAction": "Counter-clockwise",
      "cwActionInputGainTitle": "'Clockwise' input gain",
      "ccwActionInputGainTitle": "'Counter-clockwise' input gain",
      "missingInputs": "At least one of the inputs must be assigned"
    },
    "stepperBinding": {
      "operationMode": "Stepper",
      "outputDegree": "Angle (°)",
      "inputActionCw": "Step { degree }° clockwise",
      "inputActionCcw": "Step { degree }° counter-clockwise",
      "basicInputActionCw": "Step clockwise",
      "basicInputActionCcw": "Step counter-clockwise",
      "missingInputs": "At least one of the inputs must be assigned"
    },
    "setAngleBinding": {
      "operationMode": "Set angle",
      "outputAngle": "Target angle (°)",
      "readAngleFromPort": "Read angle from port",
      "setPortAngle": "Set angle to motor",
      "inputAction": "Set angle ({ angle }°)",
      "basicInputAction": "Set angle"
    },
    "trainBinding": {
      "operationMode": "Train",
      "level": "Speed { level } (%)",
      "outputLevelAdd": "Add speed",
      "outputLevelRemove": "Remove speed",
      "nextSpeed": "Next speed",
      "prevSpeed": "Prev speed",
      "reset": "Set speed #0"
    },
    "gearboxBinding": {
      "operationMode": "Gearbox",
      "angleLevel": "Gear { level } (°)",
      "readAngleFromPort": "Read angle from port",
      "setPortAngle": "Set angle to motor",
      "outputAngleLevelAdd": "Add gear",
      "outputAngleLevelRemove": "Remove gear",
      "nextGear": "Next gear",
      "prevGear": "Prev gear",
      "reset": "Set gear #0"
    },
    "accelerateBinding": {
      "operationMode": "Accelerate",
      "forwardsInput": "Forwards",
      "backwardsInput": "Backwards",
      "decelerateInput": "Decelerate",
      "missingInputs": "At least one of the inputs must be assigned",
      "outputSpeed": "Max speed",
      "forwardsSpeedIncrement": "Forwards speed increment",
      "backwardsSpeedIncrement": "Backwards speed increment",
      "decelerateSpeedDecrement": "Deceleration increment"
    },
    "powerBinding": {
      "operationMode": "Power",
      "forwardsInput": "Forwards",
      "backwardsInput": "Backwards",
      "missingInputs": "At least one of the inputs must be assigned",
      "maxPower": "Max power"
    },
    "widgets": {
      "reorderWidgetsButtonTitle": "Reorder widgets",
      "widgetMenuButtonTitle": "Widget menu",
      "moveWidgetUp": "Move up",
      "moveWidgetDown": "Move down",
      "addWidgetDialog": {
        "title": "Add Widget",
        "selectWidgetType": "Widget type",
        "saveButton": "Save",
        "cancelButton": "Cancel"
      },
      "reorderWidgetsDialog": {
        "title": "Reorder widgets",
        "saveButton": "Save",
        "cancelButton": "Cancel"
      },
      "editWidgetSettingsDialog": {
        "title": "Edit widget settings",
        "deleteButton": "Delete",
        "saveButton": "Save",
        "cancelButton": "Cancel"
      },
      "nameField": "Widget name",
      "voltage": {
        "name": "Voltage",
        "defaultName": "Voltage",
        "connectionInfo": "{hubName}:{portName} - {ioName}",
        "value": "{voltage}V",
        "valueChangeThresholdTitle": "Value change threshold (volts)",
        "noDataTitle": "No data"
      },
      "tiltCommon": {
        "compensateButtonTitle": "Click to toggle value trimming"
      },
      "pitch": {
        "name": "Pitch",
        "defaultName": "Pitch",
        "connectionInfo": "{hubName}:{portName} - {ioName}",
        "valueChangeThresholdTitle": "Value change threshold (°)",
        "invertOptionTitle": "Invert",
        "noDataTitle": "No data"
      },
      "yaw": {
        "name": "Yaw",
        "defaultName": "Yaw",
        "connectionInfo": "{hubName}:{portName} - {ioName}",
        "valueChangeThresholdTitle": "Value change threshold (°)",
        "invertOptionTitle": "Invert",
        "noDataTitle": "No data"
      },
      "roll": {
        "name": "Roll",
        "defaultName": "Roll",
        "connectionInfo": "{hubName}:{portName} - {ioName}",
        "valueChangeThresholdTitle": "Value change threshold (°)",
        "invertOptionTitle": "Invert",
        "noDataTitle": "No data"
      },
      "temperature": {
        "name": "Temperature",
        "defaultName": "Temperature",
        "connectionInfo": "{hubName}:{portName} - {ioName}",
        "value": "{temperature}°C",
        "valueChangeThresholdTitle": "Value change threshold (°C)",
        "noDataTitle": "No data"
      }
    }
  },
  "widget": {
    "deleteButtonTitle": "Delete",
    "editButtonTitle": "Edit",
    "delete": {
      "title": "Are you sure you want to delete this widget?",
      "content": "This action cannot be undone",
      "confirmButtonTitle": "Delete",
      "cancelButtonTitle": "Cancel"
    },
    "noDataTitle": "No data"
  },
  "motorServoEndState": {
    "float": "Float",
    "hold": "Hold",
    "brake": "Brake"
  },
  "about": {
    "title": "About",
    "disclaimerTitle": "Disclaimer",
    "legalNotice": "LEGO® is a trademark of the LEGO Group of companies which does not sponsor, authorize or endorse this app.",
    "licenseTitle": "License",
    "licenseText": "MIT License",
    "sourcesTitle": "Sources",
    "githubTitle": "MOC Commander GitHub",
    "githubApiTitle": "rxPoweredUp GitHub"
  },
  "io": {
    "hardwareRevision": "Hardware version",
    "softwareRevision": "Software version",
    "ioInputCapabilities": "Input capabilities",
    "ioOutputCapabilities": "Output capabilities",
    "ioCapabilitiesEmpty": "None",
    "ioTypeMotor": "Motor",
    "ioTypeSystemTrainMotor": "System Train Motor",
    "ioTypeButton": "Button",
    "ioTypeLedLight": "LED Light",
    "ioTypeVoltage": "Voltage Sensor",
    "ioTypeCurrent": "Current Sensor",
    "ioTypePiezoTone": "Piezo Tone",
    "ioTypeRgbLight": "RGB Light",
    "ioTypeExternalTiltSensor": "External Tilt Sensor",
    "ioTypeMotionSensor": "Motion Sensor",
    "ioTypeVisionSensor": "Vision Sensor",
    "ioTypeExternalMotorWithTacho": "External Motor with Tacho",
    "ioTypeInternalMotorWithTacho": "Internal Motor with Tacho",
    "ioTypeInternalTilt": "Internal Tilt",
    "ioTypeLargeTechnicMotor": "Large Technic Motor",
    "ioTypeXLargeTechnicMotor": "XLarge Technic Motor",
    "ioTypeMediumTechnicAngularMotor": "Medium Technic Angular Motor",
    "ioTypeLargeTechnicAngularMotor": "Large Technic Angular Motor",
    "ioTypeHandsetButtonGroup": "Handset Button Group",
    "ioTypeAccelerometerSensor": "Accelerometer Sensor",
    "ioTypeGyroscopeSensor": "Gyroscope Sensor",
    "ioTypeTiltSensor": "Tilt Sensor",
    "ioTypeTemperatureSensor": "Temperature Sensor",
    "ioTypeGestureSensor": "Gesture Sensor",
    "ioIsNotConnectedInlineNotification": "disconnected",
    "ioTypeMismatchNotification": "IO type mismatch, expected ''{expectedType} HW/{expectedHardwareRevision} SW/{expectedSoftwareRevision}''",
    "unknownIoType": "Unknown device type",
    "ioSynchronizableTitle": "Synchronizable"
  },
  "controller": {
    "detectControllerTip": "To connect a controller, press any button on it or move any stick",
    "unknownController": "Unknown controller",
    "noControllerConnected": "No controller detected",
    "isNotConnectedInlineNotification": "disconnected",
    "keyboardControllerType": "Keyboard",
    "gamepadControllerType": "Gamepad",
    "controllerDiscoveredNotification": "Discovered new controller: { name }",
    "controllerConnectedNotification": "{ name } controller connected",
    "controllerDisconnectedNotification": "{ name } controller disconnected",
    "ignoreControllerTitle": "Ignore controller",
    "activeZone": "Active zone",
    "activationThreshold": "Activation threshold",
    "activationThresholdHint": "The value at which the input is considered activated for button-controlled bindings",
    "trim": "Input trimming",
    "rawInput": "input",
    "output": "output",
    "invert": "Invert input",
    "ignoreInputControlTitle": "Ignore input",
    "inputIsIgnored": "Input is ignored",
    "connectedControllers": "Connected controllers:",
    "controllerNotFound": "Controller is not found",
    "controllerConnectionState": "Connection state:",
    "controllerType": "Type:",
    "controllerConnectionStateConnected": "Connected",
    "controllerConnectionStateDisconnected": "Disconnected",
    "controllerSettingsSection": "Settings",
    "controllerTypeHub": "Hub",
    "controllerTypeGamepad": "Gamepad",
    "controllerTypeKeyboard": "Keyboard",
    "isActivatedValueTrue": "Activation zone reached",
    "isActivatedValueFalse": "Activation zone not reached",
    "resetInputSettingsToDefault": "Reset to default",
    "forget": "Forget",
    "forgetButtonLabel": "Forget controller { name }",
    "forgetControllerDialogTitle": "Are you sure you want to forget this controller?",
    "forgetControllerDialogDescription": "Some control schemes may stop working. You can revert this action by reconnecting the controller; however, controller settings will be lost.",
    "forgetControllerDialogConfirmButtonTitle": "Forget",
    "forgetControllerDialogCancelButtonTitle": "Cancel"
  },
  "controllerProfiles": {
    "buttonState": "{ value, select, 1 {Pressed} other {Released} }",
    "axisState": "Position: { value }",
    "genericGamepad": {
      "name": "Generic gamepad",
      "axis": "Axis {inputId}",
      "button": "Button {inputId}"
    },
    "dualshock": {
      "name": "Dualshock",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "r2Trigger": "R2",
      "l2Trigger": "L2",
      "buttonCross": "Cross button",
      "buttonSquare": "Square button",
      "buttonTriangle": "Triangle button",
      "buttonCircle": "Circle button",
      "l1Trigger": "L1",
      "r1Trigger": "R1",
      "buttonShare": "Share",
      "buttonOptions": "Options",
      "leftStickPress": "L3 left stick press",
      "rightStickPress": "R3 right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right",
      "buttonPs": "PS",
      "buttonTouchpadPress": "Touchpad press"
    },
    "xbox360": {
      "name": "Xbox 360",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "lTrigger": "LT",
      "rTrigger": "RT",
      "buttonA": "A button",
      "buttonB": "B button",
      "buttonX": "X button",
      "buttonY": "Y button",
      "lBumper": "LB",
      "rBumper": "RR",
      "buttonShare": "Share",
      "buttonMenu": "Menu",
      "leftStickPress": "Left stick press",
      "rightStickPress": "Right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right"
    },
    "steamDeck": {
      "name": "Steam Deck",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "lTrigger": "L2",
      "rTrigger": "R2",
      "buttonA": "A button",
      "buttonB": "B button",
      "buttonX": "X button",
      "buttonY": "Y button",
      "lBumper": "L1",
      "rBumper": "R1",
      "buttonShare": "Share",
      "buttonMenu": "Menu",
      "leftStickPress": "Left stick press",
      "rightStickPress": "Right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right"
    },
    "joycon": {
      "r-name": "Joy-Con (R)",
      "l-name": "Joy-Con (L)",
      "combined": "Joy-Con (L+R)",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "zlTrigger": "ZL",
      "zrTrigger": "ZR",
      "buttonA": "A",
      "buttonB": "B",
      "buttonX": "X",
      "buttonY": "Y",
      "lBumper": "L",
      "rBumper": "R",
      "buttonMinus": "Minus",
      "buttonPlus": "Plus",
      "buttonHome": "Home",
      "buttonCapture": "Capture",
      "buttonLStick": "Left stick press",
      "buttonRStick": "Right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right",
      "buttonSLR": "SL (R)",
      "buttonSRR": "SR (R)",
      "buttonSLL": "SL (L)",
      "buttonSRL": "SR (L)",
      "unknownButton": "Button {inputId}",
      "stickXAxis": "Stick X-axis",
      "stickYAxis": "Stick Y-axis",
      "buttonSL": "SL",
      "buttonSR": "SR"
    },
    "keyboard": {
      "name": "Keyboard",
      "button": "{ inputId }",
      "captureNonAlphaNumerics": "Allow use of non-alphanumeric keys for input",
      "captureNonAlphaNumericsHint": "In some scenarios, capturing non-alphanumeric keys may prevent you from using your keyboard normally. Use this option with caution."
    },
    "hub": {
      "greenButton": "Green button",
      "plusButton": "''+'' button",
      "redButton": "Red button",
      "minusButton": "''-'' button",
      "genericButton": "Button {inputId}",
      "unknownButton": "Unknown button"
    },
    "unknown": {
      "name": "{ uid }",
      "button": "Button {inputId}",
      "axis": "Axis {inputId}"
    }
  },
  "validation": {
    "required": "Required",
    "max": "Max value is { max }",
    "min": "Min value is { min }",
    "minLength": "At least { requiredLength } is required",
    "valueShouldNotBeZero": "Value should not be zero",
    "valueShouldBeInteger": "Value must be integer",
    "valueShouldNotBeEmpty": "Value should not be empty",
    "valueShouldNotStartOrEndWithSpace": "Value should not start or end with space"
  },
  "manuals": {
    "steamDeckInstallation": {
      "name": "Steam Deck",
      "estTime": "Estimated time to complete: 5-10 minutes",
      "general": "This guide will help you install MOC Commander on your Steam Deck and use it in gaming mode to control your LEGO® Powered UP MOCs.",
      "step1": {
        "title": "Step 1. Install Google Chrome",
        "description": "To use MOC Commander application, you need to install Google Chrome browser (or any other browser that supports Web Bluetooth API).",
        "description2": "The list of supported browsers can be found at",
        "description3": ", however, this manual will focus on Google Chrome.",
        "switchToDesktop": "Press the Steam button to bring up the Steam Deck menu and select \"Power\" -> \"Switch to Desktop\"",
        "openDiscover": "Open the Discover app on taskbar",
        "openWebBrowsers": "Select \"Internet\" -> \"Web browsers\"",
        "installChrome": "Find \"Google Chrome\" and press \"Install\"",
        "closeDiscover": "After the installation is complete, close the Discover app"
      },
      "step2": {
        "title": "Step 2. Enable Bluetooth support in Google Chrome",
        "description": "By default, Google Chrome does not support Bluetooth devices on Linux. To enable Bluetooth support, follow the steps below:",
        "openChrome": "Open the Application Launcher on the taskbar, select \"Internet\" -> \"Google Chrome\"",
        "pasteFlagsUrl": "Paste the following URL into the address bar",
        "pressEnter": "and press Enter",
        "enableFeature": "Toggle the \"Experimental Web Platform features\" to \"Enabled\"",
        "restartChrome": "Press the \"Relaunch\" button to restart Google Chrome",
        "openMocCommander": "Open MOC Commander at",
        "result": "Now, you can use MOC Commander in desktop mode and use Steam Input in keyboard mode to control your MOCs."
      },
      "step3": {
        "title": "Step 3. (Optional) Allow Google Chrome to install PWA & access gamepad devices",
        "openKonsole": "Close Google Chrome and open the Konsole app (Application Launcher -> \"System\" -> \"Konsole\")",
        "enterCommand": "Enter the following command and press Enter:",
        "enterCommandMotivation": "This command will allow Google Chrome to install the MOC Commander app and access gamepad devices.",
        "closeKonsole": "Close the Konsole app"
      },
      "step4": {
        "title": "Step 4. (Optional) Install MOC Commander and add it to Steam Client Library",
        "openChrome": "Open Google Chrome",
        "openMocCommander": "Open MOC Commander at",
        "installPwa": "Press \"Install\" button in the top right corner",
        "confirmInstall": "Press the \"Install\" button in the popup window. The app will launch automatically",
        "closeAll": "Close both Google Chrome and the MOC Commander app",
        "openAddNonSteamGame": "Open the Steam Client, select \"Library,\" and press \"Add a Game\" -> \"Add a Non-Steam Game\"",
        "addMocCommander": "Find \"MOC Commander\" in the list, toggle the checkbox, and click \"Add Selected Programs\"",
        "returnToGamingMode": "Return to gaming mode by double-tapping the \"Return To Gaming Mode\" icon on the desktop",
        "result": "The app should appear in the Steam Client Library under the \"Non-Steam\" category.",
        "following": "Now you can use MOC Commander in game mode with full support of Steam Input."
      },
      "step5": {
        "title": "Step 5. (Optional) Set starting resolution for MOC Commander",
        "description": "By default, the application will launch at a lower resolution than the screen resolution of the Steam Deck. To set the starting resolution to the maximum available, follow the steps below:",
        "openAppProperties": "Find \"MOC Commander\" in the Steam Client Library and open its properties (\"Gear Icon\" -> \"Properties\")",
        "addOption": "In \"Launch Options,\" add a space at the end of the line and the following option:",
        "closeProperties": "Close the properties window",
        "result": "Now, the application will launch at the maximum available resolution.",
        "toExitDesktop": "To exit the application while in desktop mode, press L5 + R5 and then - 'Stop' in the Steam Client",
        "toExitGameMode": "To exit the application in game mode, press the Steam button and select \"Exit game\"."
      }
    },
    "windowsInstallation": {
      "name": "Windows",
      "estTime": "Estimated time to complete: 3 minutes",
      "general": "This guide will help you install MOC Commander as a standalone app on your Windows PC and use it to control your LEGO® Powered UP MOCs with your keyboard, mouse and gamepads.",
      "step1": {
        "title": "Step 1. Install Google Chrome",
        "description": "To use MOC Commander application, you need to install Google Chrome browser (or any other browser that supports Web Bluetooth API) from official website or Microsoft Store",
        "description2": "The list of supported browsers can be found at",
        "description3": ", however, this manual will focus on Google Chrome."
      },
      "step2": {
        "title": "Step 2. (Optional) Install MOC Commander as a an app",
        "description": "To use MOC Commander as a standalone app, follow the steps below:",
        "openChrome": "Open Google Chrome",
        "openMocCommander": "Open MOC Commander at",
        "installPwa": "Press \"Install\" button in the top right corner",
        "confirmInstall": "Press the \"Install\" button in the popup window. The app will launch automatically",
        "result": "This will install MOC Commander as a PWA app and add it to the Start menu and the desktop."
      }
    },
    "linuxInstallation": {
      "name": "Linux",
      "step1": {
        "title": "Step 1. Install Google Chrome using your package manager or download it from the official website"
      },
      "step2": {
        "title": "Step 2. Enable Bluetooth support in Google Chrome",
        "description": "By default, Google Chrome does not support Bluetooth devices on Linux. To enable Bluetooth support, follow the steps below:",
        "openChrome": "Open Google Chrome",
        "pasteFlagsUrl": "Paste the following URL into the address bar",
        "flagsUrl": "chrome://flags/#enable-experimental-web-platform-features",
        "pressEnter": "and press Enter",
        "enableFeature": "Toggle the \"Experimental Web Platform features\" to \"Enabled\"",
        "restartChrome": "Press the \"Relaunch\" button to restart Google Chrome",
        "openMocCommander": "Open MOC Commander at"
      }
    }
  },
  "changelog": {
    "title": "Changelog",
    "bugfixesAndImprovements": "Bugfixes and improvements",
    "1-0-0": {
      "initialRelease": "Initial release"
    },
    "1-0-1": {
      "featIncreaseGamepadReadFrequency": "Increased gamepad poll rate"
    },
    "1-1-0": {
      "featAddInstallationInstructions": "Installation instructions for Steam Deck, Windows, and Linux",
      "featAddSteamDeckControllerProfile": "Addition of a Steam Deck controller profile",
      "featMakeAppInstallableAsPWA": "The app is now installable as a PWA (Progressive Web App)",
      "featWidgets": "Control scheme widgets"
    },
    "1-2-0": {
      "featUnsavedChangesNotifications": "Notifications for unsaved changes on pages with forms",
      "featWakeLock": "Wake Lock to prevent the screen from turning off when a control scheme is running",
      "featNavigationBreadcrumbs": "Navigation breadcrumbs",
      "featControlSchemeNameAutoGeneration": "Auto-generation of control scheme names",
      "featAxialAwarenessForStepperTrainAndGearboxControls": "Axial input direction awareness for 'Stepper', 'Train', and 'Gearbox' bindings",
      "featReadAndSetMotorPositionDuringControlSchemeEditing": "Ability to read and set motor position during editing of 'Set angle' and 'Gearbox' bindings"
    },
    "1-2-1": {
      "featFasterServoCalibration": "Faster servo calibration",
      "featAppUpdatedNotification": "Display of a notification when the app is updated"
    },
    "1-2-2": {
      "featSeparateControlsForServoCwAndCcw": "Separate controls for servo clockwise and counter-clockwise inputs",
      "featMotorPositionAdjustment": "Fine-grained motor position adjustment during editing of 'Set angle', 'Servo', and 'Gearbox' bindings",
      "featUseLinuxCompatSetting": "Linux-compatible connection mode setting is now available in the app settings",
      "featThisChangelog": "Addition of this changelog"
    },
    "1-2-3": {
      "featImprovedUiPerformance": "Improved UI performance",
      "featRaiseServoMotorRangeLimit": "Increased servo motor range limit to 4 full rotations (1440°)",
      "featSeparateControlsForForwardAndBackwardSpeed": "Separate controls for forward and backward speed in 'Speed' bindings",
      "featDirectionAwareControls": "All binding input controls now adhere to the input direction of gamepad axes",
      "featBetterL10nForTrainAndGearbox": "Better localization for 'Train' and 'Gearbox' controls",
      "featSeparateControlsForCwCcwStepper": "Separate controls for clockwise and counter-clockwise stepper inputs",
      "changeStepperNegativeValuesRemoved": "Only positive values are allowed for step angle in 'Stepper' binding. Use counter-clockwise controller input for negative values",
      "featAcquireWakeLockWhenAtLeastOneHubIsConnected": "Acquire Wake Lock when at least one hub is connected",
      "featInputGainForBrakeInputOfSpeedBinding": "Input gain for 'Brake' input of 'Speed' binding",
      "featHubHWAndSWVersionInHubInfo": "Display of hub hardware and software versions in the hub info panel"
    },
    "1-2-4": {
      "featOnOffToggleInputPreset": "On/off toggle mode for 'Speed' and 'Servo' binding inputs",
      "featSeparatePitchYawRollTiltSensorWidgets": "Separate pitch, yaw, and roll tilt sensor widgets"
    },
    "1-2-5": {
      "appIconUpdated": "Updated app icon (now it displays correctly during the process of adding the app to the Steam Client Library)",
      "servoManualRangeReadFix": "Fixed manual servo range read from port during binding editing",
      "servoCenterOnStartForKeyInputsFix": "Fixed servo not centering on start when using key or button inputs"
    },
    "1-2-6": {
      "fixServoCalibrationForRangesGraterThan360": "Fixed servo calibration for ranges greater than 360°",
      "fixServoCalibrationResultsNotBeingRound": "Fixed servo calibration results not being rounded to the nearest degree",
      "fixMultipleServoCalibrationOnStartup": "Fixed issue with incorrect results of multiple servo calibration on startup",
      "featMotorStrainingReduction": "Reduced motor straining at the ends of the servo range received during calibration"
    },
    "1-2-7": {
      "compactRedesignControlSchemes": "Compact redesign of the control schemes list for better usability on smaller screens",
      "runningControlSchemePerformanceImprovements": "Performance improvements for running control schemes",
      "fixPwaBackgroundColor": "Fixed background color of the PWA app",
      "fixHighFrequencyTaskStalling": "Fixed task stalling when processing high-frequency inputs"
    },
    "1-2-8": {
      "minorNotificationImprovements": "Minor improvements to notifications",
      "addGamepadPollingRateSettings": "Gamepad polling rate option added to the settings",
      "increaseGamepadPollingRate": "Increased default gamepad poll rate. Previous value is now considered 'Low' in the settings",
      "fixWidgetUpdatesAfterSchemeStartFailure": "Fixed widgets continuing to update after a control scheme start failure"
    },
    "1-2-9": {
      "accessibilityImprovements": "Minor accessibility improvements",
      "layoutFixesForSmallScreens": "Layout fixes for small screens"
    },
    "1-3-0": {
      "accelerationBindingTypeAdded": "Added 'Accelerate' binding type",
      "addedPulseInputPreset": "Added 'Pulse' binding input configuration preset (1, 2, and 5 Hz)"
    },
    "1-3-2": {
      "lpf2Support": "Added support for LPF2-TRAIN and LPF2-MMOTOR",
      "powerModeAdded": "Added 'Power' binding type for motor control"
    }
  }
}
